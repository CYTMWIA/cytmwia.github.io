{"title":"我的开发环境（2023）","pub_time":1677577800000,"mod_time":1678101572000,"content":"[TOC]\n\n## Overview\n\n&emsp;&emsp;我开发的项目主要使用 C/C++/Python 等编程语言，需要的功能包括但不限于：**代码补全**、**变量重命名**、**代码格式化**、**文档注释**……  \n&emsp;&emsp;而且，这些项目经常要部署到各种 Linux 环境下，但我个人电脑的环境不仅软件版本高，甚至连系统、处理器架构都不一样，怎能顺利开发其他环境下的项目呢？直接在虚拟机里开发也不方便呀，所以我还需要**远程开发**或**统一环境**的功能。\n\n&emsp;&emsp;那么，有没有这么一个软件，可以同时具有我需要的所有功能呢？\n\n## VS Code\n\n&emsp;&emsp;虽然 [VS Code](https://code.visualstudio.com/) 本体只是一个编辑器，并不提供任何编译或执行的功能，但依靠强大的扩展系统和[扩展市场](https://marketplace.visualstudio.com/vscode)，我们可以把 VS Code 改造成最适合自己的开发工具。\n\n### C/C++\n\n我使用的扩展：\n\n- [C/C++](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)（代码提示、重构、格式化……）\n- [CMake](https://marketplace.visualstudio.com/items?itemName=twxs.cmake)（代码提示）\n- [Doxygen Documentation Generator](https://marketplace.visualstudio.com/items?itemName=cschlosser.doxdocgen)（注释）\n\n&emsp;&emsp;在一段时间以前，我是用 [clangd](https://marketplace.visualstudio.com/items?itemName=llvm-vs-code-extensions.vscode-clangd) 的，因为它可以读取`compile_commands.json`从而自动设置代码提示中的宏定义和 include 路径。但现在 C/C++ 也可以了，而且使用体验我个人感觉比 clangd 要好。  \n&emsp;&emsp;你也许会问，为什么没有 [CMake Tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools)？因为我更喜欢手动管理项目，而不喜欢扩展自动帮我处理，因为扩展可能对 CMake 使用了与`build.sh`中不同的参数，从而导致最后软件的行为不一致。所以我只需要 CMake 扩展给我提供代码高亮就够了。  \n\n参考：\n\n- [Visual Studio Code 如何编写运行 C、C++ 程序？ - 谭九鼎的回答 - 知乎](https://www.zhihu.com/question/30315894/answer/154979413)\n- [Generating a JSON compilation database](https://www.jetbrains.com/help/fleet/generating-a-json-compilation-database.html)（生成`compile_commands.json`）\n\n### Python\n\n我使用的扩展：\n\n- [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python)\n\n&emsp;&emsp;虽然我只安装了一个 Python 扩展，但它实际是个扩展包，里面包括了好几个 Python 相关的扩展。  \n&emsp;&emsp;对于 Python 项目，我是通过`venv`手动管理坏境的……而且 VS Code 的 Python 扩展会识别工作路径下的虚拟环境，所以实际体验还不错。\n\n### Remote\n\n&emsp;&emsp;在开头我就提到了需要在其他环境下部署程序，那么怎么保证软件在别的环境下可以正常运行呢？答，在与运行环境相同的环境上开发即可，实际的开发环境可能是虚拟机、远程服务器、Docker……  \n&emsp;&emsp;那我们还需要在远程环境重新配置开发环境吗？可以但没必要，因为无论你怎样配置虚拟机或远程环境里的开发环境，其使用体验都很难媲美本地主机上的开发环境。  \n\n&emsp;&emsp;只需安装一个扩展包 [Remote Development](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack) 就够了，满足 SSH、WSL、Docker 环境下的开发，当然你也可以选择按需安装。\n\n参考：\n\n- [VS Code Remote Development](https://code.visualstudio.com/docs/remote/remote-overview)**（官方）**\n- [VSCode Remote 体验 | 远程Linux环境开发真香](https://zhuanlan.zhihu.com/p/64849549)\n- [VSCode远程开发指南](https://zhuanlan.zhihu.com/p/578494435)\n\n&emsp;&emsp;对于 GUI 软件，我认为最好也是在主机上进行开发，因为配置在远程环境配置开发环境，使用体验实在糟糕。若是需要界面进行调试的话，我这有两个方法。  \n\n- 设置环境变量`DISPLAY`（[参考](https://askubuntu.com/questions/47642/how-to-start-a-gui-software-on-a-remote-linux-pc-via-ssh)）\n    1. 先在虚拟机或远程桌面中查看`DISPLAY`变量的值\n    2. 之后在 连接远程的终端 中将`DISPLAY`设置为在上一步获取到的值（例如`export DISPLAY=:0`）\n    3. 最后就可以在 连接远程的终端 启动 GUI 软件了，界面会出现在远程桌面中  \n    也就是说远程桌面不承担任何开发任务，只用于查看调试时的界面\n- X11 转发，对于实际远程（非本机）来说体验十分糟糕，但在 Docker（本机）中表现不错，详见下文 Docker 一节。\n\n&emsp;&emsp;关于远程桌面，我认为 [NoMachine](https://www.nomachine.com/) 的使用体验就不错，而且也有免费版。\n\n## Docker\n\n&emsp;&emsp;使用 VS Code 在 Docker 容器内进行开发也是非常方便的，不仅可以[创建](https://code.visualstudio.com/docs/devcontainers/create-dev-container)新容器，还可以[附加（Attach）](https://code.visualstudio.com/docs/devcontainers/attach-container)到现有容器，而且不论是哪种使用方式都支持自动安装扩展，使用体验更加方便。\n\n&emsp;&emsp;关于代码编辑，我目前的做法是将主机的代码文件夹直接映射到容器的代码文件夹，这样通过 VS Code 编辑容器内的代码就等同于编辑主机上的代码，容器内编译之类的操作也可以正常运行。    \n\n&emsp;&emsp;关于在 Docker 内运行具有图形界面的软件方法，网上已有不少教程（基本都是基于 X11），其中 *[Run A GUI APPs inside a Docker Container](https://medium.com/geekculture/run-a-gui-software-inside-a-docker-container-dce61771f9)* 我觉得是写得比较完善的。对于没有 X Server 的 Windows 系统，由于 WSLg 的推出，按照 Linux 的步骤配置好后应该也可以显示图形界面了，若系统不支持 WSLg 的话，可以看看*[在 Docker for Windows 中运行 GUI 程序](https://www.cnblogs.com/larva-zhh/p/10531824.html)*。  \n\n参考：\n\n- [Docker CLI Doc](https://docs.docker.com/engine/reference/commandline/cli/)\n- [Dockerfile reference](https://docs.docker.com/engine/reference/builder/)\n- [Docker Compose specification](https://docs.docker.com/compose/compose-file/)\n\n## JetBrains\n\n&emsp;&emsp;有时我也会用 [JetBrains](https://www.jetbrains.com/zh-cn/) 家的开发工具。具体使用就不提了，因为我用的确实不多。但值得一提的是，对于个人开发者或学生来说，Jetbrains 家的工具还是很容易获得免费的正版授权的。  \n\n- 对于学生或教师，可以参考 [免费教育许可证](https://www.jetbrains.com/zh-cn/community/education/#students)\n- 对于个人开发者，可以参考 [开源开发许可证](https://www.jetbrains.com/zh-cn/community/opensource/#support)\n\n**请不要将授予的许可证用于许可证范围之外的开发。**\n"}